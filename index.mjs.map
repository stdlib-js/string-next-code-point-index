{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar RE_UTF16_LOW_SURROGATE = /[\\uDC00-\\uDFFF]/; // TODO: replace with stdlib pkg\nvar RE_UTF16_HIGH_SURROGATE = /[\\uD800-\\uDBFF]/; // TODO: replace with stdlib pkg\n\n\n// MAIN //\n\n/**\n* Returns the position of the next Unicode code point in a string after a specified position.\n*\n* @param {string} str - input string\n* @param {integer} [fromIndex=0] - position\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} position of the next Unicode code point\n*\n* @example\n* var out = nextCodePointIndex( 'last man standing', 4 );\n* // returns 5\n*\n* @example\n* var out = nextCodePointIndex( 'presidential election', 8 );\n* // returns 9\n*\n* @example\n* var out = nextCodePointIndex( '𐒻𐓟𐒻𐓟', 0 );\n* // returns 2\n*\n* @example\n* var out = nextCodePointIndex( '🌷' );\n* // returns -1\n*/\nfunction nextCodePointIndex( str, fromIndex ) {\n\tvar lastIndex;\n\tvar len;\n\tvar idx;\n\tvar i;\n\tvar j;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( '1lf3F', str ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isInteger( fromIndex ) ) {\n\t\t\tthrow new TypeError( format( '1lf7f', fromIndex ) );\n\t\t}\n\t\tidx = fromIndex;\n\t} else {\n\t\tidx = 0;\n\t}\n\tlen = str.length;\n\tif ( idx < 0 ) {\n\t\tidx += len;\n\t\tif ( idx < 0 ) {\n\t\t\tidx = 0;\n\t\t}\n\t}\n\tlastIndex = len - 1;\n\tif ( idx >= lastIndex ) {\n\t\treturn -1;\n\t}\n\n\t// Check for a high UTF-16 surrogate...\n\ti = idx + 1;\n\tj = i + 1;\n\tif ( RE_UTF16_HIGH_SURROGATE.test( str[ idx ] ) ) {\n\t\t// Check whether the high surrogate is paired with a low surrogate...\n\t\tif ( RE_UTF16_LOW_SURROGATE.test( str[ i ] ) ) {\n\t\t\t// We found a surrogate pair:\n\t\t\treturn ( j >= lastIndex ) ? -1 : j;\n\t\t}\n\t\treturn i;\n\t}\n\treturn i;\n}\n\n\n// EXPORTS //\n\nexport default nextCodePointIndex;\n"],"names":["RE_UTF16_LOW_SURROGATE","RE_UTF16_HIGH_SURROGATE","nextCodePointIndex","str","fromIndex","lastIndex","len","idx","i","j","isString","TypeError","format","arguments","length","isInteger","test"],"mappings":";;sTA6BA,IAAIA,EAAyB,kBACzBC,EAA0B,kBA8B9B,SAASC,EAAoBC,EAAKC,GACjC,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAUP,GACf,MAAM,IAAIQ,UAAWC,EAAQ,QAAST,IAEvC,GAAKU,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAWX,GAChB,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAEvCG,EAAMH,CACR,MACEG,EAAM,EAUP,OARAD,EAAMH,EAAIW,OACLP,EAAM,IACVA,GAAOD,GACI,IACVC,EAAM,GAIHA,IADLF,EAAYC,EAAM,IAET,GAKTG,GADAD,EAAID,EAAM,GACF,EACHN,EAAwBe,KAAMb,EAAKI,KAElCP,EAAuBgB,KAAMb,EAAKK,IAE7BC,GAAKJ,GAAe,EAAII,EAI5BD,EACR"}